## 事件循环机制
+ 一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。

+ 任务队列又分为macro-task（宏任务）与micro-task（微任务），在最新标准中，它们被分别称为task与jobs。

+ macro-task大概包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering。

+ micro-task大概包括: process.nextTick, Promise, Object.observe(已废弃), MutationObserver(html5新特性)

+ setTimeout/Promise等我们称之为任务源。而进入任务队列的是他们指定的具体执行任务


## demo1

    setTimeout(function() {
        console.log('timeout1');
    })
    
    new Promise(function(resolve) {
        console.log('promise1');
        for(var i = 0; i < 1000; i++) {
            i == 99 && resolve();
        }
        console.log('promise2');
    }).then(function() {
        console.log('then1');
    })
    
    console.log('global1');
    

> 依次输出：promise1 -- promise2 -- global1 -- then1 -- timeout1


## demo2

    console.log('golb1');
    
    setTimeout(function() {
        console.log('timeout1');
        process.nextTick(function() {
            console.log('timeout1_nextTick');
        })
        new Promise(function(resolve) {
            console.log('timeout1_promise');
            resolve();
        }).then(function() {
            console.log('timeout1_then')
        })
    })
    
    setImmediate(function() {
        console.log('immediate1');
        process.nextTick(function() {
            console.log('immediate1_nextTick');
        })
        new Promise(function(resolve) {
            console.log('immediate1_promise');
            resolve();
        }).then(function() {
            console.log('immediate1_then')
        })
    })
    
    process.nextTick(function() {
        console.log('glob1_nextTick');
    })
    new Promise(function(resolve) {
        console.log('glob1_promise');
        resolve();
    }).then(function() {
        console.log('glob1_then')
    })
    
    setTimeout(function() {
        console.log('timeout2');
        process.nextTick(function() {
            console.log('timeout2_nextTick');
        })
        new Promise(function(resolve) {
            console.log('timeout2_promise');
            resolve();
        }).then(function() {
            console.log('timeout2_then')
        })
    })
    
    process.nextTick(function() {
        console.log('glob2_nextTick');
    })
    new Promise(function(resolve) {
        console.log('glob2_promise');
        resolve();
    }).then(function() {
        console.log('glob2_then')
    })
    
    setImmediate(function() {
        console.log('immediate2');
        process.nextTick(function() {
            console.log('immediate2_nextTick');
        })
        new Promise(function(resolve) {
            console.log('immediate2_promise');
            resolve();
        }).then(function() {
            console.log('immediate2_then')
        })
    })
    
> 依次输出：golb1 -- glob1_promise -- glob2_promise -- glob1_nextTick -- glob2_nextTick -- glob1_then -- glob2_then -- timeout1 -- timeout1_promise -- timeout2 -- timeout2_promise -- timeout1_nextTick -- timeout2_nextTick -- timeout1_then -- timeout2_then -- immediate1 -- immediate1_promise -- immediate2 -- immediate2_promise -- immediate1_nextTick -- immediate2_nextTick -- immediate1_then -- immediate2_then